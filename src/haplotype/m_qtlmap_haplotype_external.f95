!!****m* HAPLOTYPE/m_qtlmap_haplotype_external
!!  NAME
!!    m_qtlmap_haplotype_external
!!  DESCRIPTION
!!
!!  NOTES
!!
!!  BUGS
!!
!!  HISTORY
!!
!!  SEE ALSO
!!
!!  COPYRIGHT
!!***
!! You can use this space for remarks that should not be included
!! in the documentation.
!!/
module m_qtlmap_haplotype_external
    use m_qtlmap_haplotype_V2
    use m_qtlmap_base
    use m_qtlmap_types
    use m_qtlmap_log
    use m_qtlmap_haplotype_util, only : transmi,gammapf
    implicit none
    save


    public :: haplotype_external

    contains

!!****f* m_qtlmap_haplotype_external/haplotype_external
!! NAME
!!   haplotype_V1
!! DESCRIPTION
!!   Use the haplotype/phases for the F1 (sire and dam) given by the user (read order) [this information has been generated by an other tools than qtlmap]
!!   for each marker A B => A allele from the first chromosome (sire segment), B allele from the second chromosome
!!
!! NOTES
!!  fill arrays : pdd,ngenom,ngend,ndesc,probg,phasp,phasm,genotyp,genotypm
!!
!! SOURCE
    subroutine haplotype_external(dataset,spt)
      type(QTLMAP_DATASET)       ,intent(in)            :: dataset
      type(PDD_BUILD)            ,intent(inout)         :: spt

      integer :: c,jm,kd,valnpo(dataset%map%nchr),i,ip,il
      type(GENEALOGY_BASE) , pointer :: dg
      type(GENOTYPE_BASE) , pointer :: dga

      dga => dataset%genoAnimal
      dg => dataset%genea


      allocate ( spt%ngend(dataset%map%nchr,dg%nm+1) )
      allocate ( spt%probg(dataset%map%nchr,dg%nm) )
      allocate ( spt%ndesc(dataset%map%nchr,dg%nd) )
      allocate ( spt%genotypm(dataset%map%nchr,maxval(dataset%map%nmk),dg%nm,2) )
      allocate ( spt%ngenom(dataset%map%nchr,dg%nm+1) )
      allocate ( spt%phasp(dataset%map%nchr,dg%np) )
      allocate ( spt%phasm(dataset%map%nchr,dg%nm) )
      allocate ( spt%genotyp(dataset%map%nchr,maxval(dataset%map%nmk),(size(dga%numero)),2) )

      ! structure de m_haplotype_V2
      allocate (spt%prot(dataset%map%nchr,maxval(dataset%map%nmk),dg%nd,4))

      call gammapf(dataset,spt)

      do c=1,dataset%map%nchr
       spt%ngenom(c,1)=0
       do jm=1,dg%nm
        spt%probg(c,jm)=1.d0
        spt%ngenom(c,jm+1)=spt%ngenom(c,jm)+1
        spt%ngend(c,jm)=dg%ndm(jm)
        spt%ngend(c,jm+1)=dg%ndm(jm+1)
        do kd=dg%ndm(jm)+1,dg%ndm(jm+1)
          spt%ndesc(c,kd)=kd
        end do

        if(dga%correm(jm) /= 9999) then
          do il=1,dataset%map%nmk(c)
           spt%genotypm(c,il,jm,1)=dga%pheno(c,il,dga%correm(jm),1)
           spt%genotypm(c,il,jm,2)=dga%pheno(c,il,dga%correm(jm),2)
          end do !il
          spt%phasm(c,jm)=.true.
        end if
       end do !jm

       do ip=1,dg%np
        if(dga%correp(ip) /= 9999) then
         do i=1,dataset%map%nmk(c)
            spt%genotyp(c,i,dga%correp(ip),1)=dga%pheno(c,i,dga%correp(ip),1)
            spt%genotyp(c,i,dga%correp(ip),2)=dga%pheno(c,i,dga%correp(ip),2)
         end do !i
         spt%phasp(c,ip)=.true.
        end if
       end do !ip

      end do !c

      call setting_alloc_pdd(dataset,spt)
      call pded_v5_optim(dataset,spt)

    end subroutine haplotype_external
!!***

end module m_qtlmap_haplotype_external
